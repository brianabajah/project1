package com.pro1.test;

import org.junit.Test;
import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import com.pro1.DAO.*;
import com.pro1.dtbAccessors.*;
import com.pro1.reimburse.reimbursements.*;
import com.pro1.reimburse.users.Users;

public class ReimburseTest {

	Timestamp tim= Timestamp.valueOf(LocalDateTime.now());
	private Reimbursement  reimb = new Reimbursement(1, 1, 1, 1, tim, tim, "more info", 1, 1);
	private Users user = new Users(1,1, "test", "test", "test", "test","test");
	ReimbDao rd= new ReimbDao();
	
	@Test
	public void testgetReimb_id() {
		
		assertTrue(reimb.getReimb_id()==1);
	}

	@Test
	public void testgetReimb_amount() {
		
		assertTrue(reimb.getReimb_amount()==1);
	}

	@Test
	public void testgetReimb_submitted() {
		assertTrue(reimb.getReimb_submitted() instanceof  Timestamp);
	}
	
	@Test
	public void  testgetReimb_resolved() {
		assertTrue(reimb.getReimb_resolved() instanceof  Timestamp);
	}

	@Test
	public void testgetReimb_description() {
		
		assertEquals(reimb.getReimb_description(),"more info");
	}

	@Test
	public void testgetReimb_author() {
		assertTrue(reimb.getReimb_author()== 1);
	}
	
	@Test
	public void testgetReimb_resolver() {
		assertTrue(reimb.getReimb_resolver()== 1);
	}
	
	@Test
	public void testgetReimb_status_id() {
		
		assertTrue(reimb.getReimb_status_id()== 1);
	}
	
	@Test
	public void testgetReimb_status() {
		reimb.setReimb_status("pending");
		assertEquals(reimb.getReimb_status(),"pending");
	}
	
	@Test
	public void testgetReimb_type_id() {
		assertTrue(reimb.getReimb_type_id()== 1);
	}
	
	@Test
	public void testgetReimb_type() {
		reimb.setReimb_type("lodging");
		assertEquals(reimb.getReimb_type(),"lodging");
	}
	
	@Test
	public void testgetUrl() {
		Authentication aut= new Authentication();
		assertTrue(aut.getUrl().equals(System.getenv("URL")));
	}
	
	@Test
	public void testgetName() {
		Authentication aut= new Authentication();
		assertTrue(aut.getName().equals(System.getenv("NAME")));

	}
	@Test
	public void testgetPass() {
		Authentication aut= new Authentication();
		assertTrue(aut.getPass().equals(System.getenv("PASS")));
	}
	@Test
	public void testConnection() {
		Connectivity con = new Connectivity();
		assertTrue(con.getCon() instanceof Connection);
	} 
	
	@Test
	public void testaddNewEmployee() {
		Users use= new Users(1, "test", "test", "test", "test", "test");
		UserDao usdao = new UserDao();
		assertTrue(usdao.addNewEmployees(use)>=0);
 	}
	
	@Test
	public void testgetEmployee() {
		UserDao usdao = new UserDao();
		assertTrue(usdao.getEmployees("test") instanceof Users);
 	}
	
	@Test
	public void testnotgetEmployee() {
		UserDao usdao = new UserDao();
		assertTrue(usdao.getEmployees("CowBoyBeepBop")==null);
 	}
	
	@Test
	public void testgetUserLastName() {
		assertEquals(user.getUserLastName(),"test");
	}

	@Test
	public void testgetUserName() {
		assertEquals(user.getUserName(),"test");
	}
	@Test
	public void testgetPassword() {
		assertEquals(user.getPassword(),"test");
	}
	@Test
	public void testgetUserFirstName() {
		assertEquals(user.getUserFirstName(),"test");
	}
	@Test
	public void testgetUserEmail() {
		assertEquals(user.getUserFirstName(),"test");
	}
	
	@Test
	public void tectcommitDao() {
		assertTrue(rd.commitReimburse(reimb)>=0);
	}
	
	@Test
	public void testgetTS() {
		assertEquals(rd.getTS("type", 1),"lodging");
	}
	
	@Test
	public void testgetTSNot() {
		assertEquals(rd.getTS("", 1),"pending");
	}
	
	@Test
	public void testviewReims() {
		assertTrue(rd.viewReims(1).size()>0);
	}

	
}
